
@{
    ViewBag.Title = "Index";
}

<div id="app" class="container-fluid mt-4">
    <h1 class="h1">Order Manager</h1>
    <div class="alert alert-info" role="alert" v-show="loading">Loading...</div>
    <div class="row">
        <hr />
        <div class="col" v-if="editorMode">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">{{(model.Id ? 'Edit Order ID#' + model.Id : 'New Order')}}</h5>
                    <form v-on:submit.prevent="saveOrder">
                        <div class="form-group">
                            <label for="input7">User</label>
                            <select v-model="model.User" class="form-control" id="input7">
                                <option v-for="user in users" :value="user">{{ user.LastName + ', ' + user.FirstName }}</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="input1">Tracking Id</label>
                            <input type="text" class="form-control" id="input1" v-model="model.TrackingId" />
                        </div>
                        <div class="form-group">
                            <label for="input2">Name</label>
                            <input type="text" class="form-control" id="input2" v-model="model.Name" />
                        </div>
                        <div class="form-group">
                            <label for="input3">StreetAddress</label>
                            <input type="text" class="form-control" id="input3" v-model="model.StreetAddress" />
                        </div>
                        <div class="form-group">
                            <label for="input4">City</label>
                            <input type="text" class="form-control" id="input4" v-model="model.City" />
                        </div>
                        <div class="form-group">
                            <label for="input5">State</label>
                            <input type="text" class="form-control" id="input5" v-model="model.State" />
                        </div>
                        <div class="form-group">
                            <label for="input6">Zip</label>
                            <input type="text" class="form-control" id="input6" v-model="model.ZipCode" />
                        </div>
                        <div>
                            <button type="submit" class="btn btn-primary">Save Order</button>
                            <a href="#" id="cancel" name="cancel" class="btn btn-default" v-on:click.prevent="onCancel">Cancel</a>

                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="col" v-else>

            <div class="row">
                <div class="col-xs-6">
                    <div class="input-group">
                        <button type="submit" class="btn btn-primary" v-on:click.prevent="populateOrderToEdit({})">Add Order</button>
                    </div>
                </div>
                <div class="col-xs-6">
                    <div class="input-group">
                        <span class="input-group-addon">Filter</span>
                        <select v-model="userFilter" class="form-control" id="userFilterDropdown">
                            <option selected value="">--All--</option>
                            <option v-for="user in users" :value="user">{{ user.LastName + ', ' + user.FirstName }}</option>
                        </select>
                    </div>
                </div>
            </div>

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Tracking Id</th>

                        <th>Name</th>
                        <th>Address</th>
                        <th>City</th>
                        <th>State</th>
                        <th>Zip</th>

                        <th>User</th>
                        <th>&nbsp;</th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="order in filteredData" :key="order.Id">
                        <td>{{ order.Id }}</td>
                        <td>{{ order.TrackingId }}</td>

                        <td>{{ order.Name }}</td>
                        <td>{{ order.StreetAddress }}</td>
                        <td>{{ order.City }}</td>
                        <td>{{ order.State }}</td>
                        <td>{{ order.ZipCode }}</td>

                        <td>{{ order.User.LastName + ', ' + order.User.FirstName }}</td>
                        <td class="text-right">
                            <a href="#" v-on:click.prevent="populateOrderToEdit(order)">Edit</a> -
                            <a href="#" v-on:click.prevent="deleteOrder(order.Id)">Delete</a>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
@section scripts
    {
    <script>
        var app = new Vue({
            el: '#app',
            data: {
                loading: false,
                orders: [],
                users: [],
                model: {},
                userFilter: "",
                editorMode: false,
            },
            mounted: function () {
                this.refreshOrders();
                this.refreshUsers();
            },
            methods: {
                onCancel: function() {
                    this.editorMode = false;
                }, 
                populateOrderToEdit: function (order) {
                    this.editorMode = true;
                    this.model = Object.assign({}, order);
                },
                deleteOrder: function (orderId) {
                    if (confirm('Are you sure you want to delete this order?')) {
                        if (this.model.Id === orderId) {
                            this.model = {};
                        }
                        this.deleteOrderApi(orderId);
                    }
                },
                deleteOrderApi: function (orderId) {
                    var self = this;
                    $.ajax({
                        url: '/api/Orders/' + orderId,
                        method: 'DELETE',
                        success: function (data) {
                            self.refreshOrders();
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                },
                updateOrderApi: function (id, order) {
                    var self = this;
                    $.ajax({
                        url: '/api/Orders/' + id,
                        method: 'PUT',
                        dataType: 'json',
                        data: order,
                        success: function (data) {
                            self.refreshOrders();
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                },
                createOrderApi: function (order) {
                    var self = this;
                    $.ajax({
                        url: '/api/Orders',
                        method: 'POST',
                        dataType: 'json',
                        data: order,
                        success: function (data) {
                            self.refreshOrders();
                        },
                        error: function (error) {
                            console.log(error);
                        }
                    });
                },
                saveOrder: function () {
                    console.log(this.model);
                    if (this.model.Id) {
                        this.updateOrderApi(this.model.Id, this.model);
                    } else {
                        this.createOrderApi(this.model);
                    }
                    this.model = {};
                },
                refreshOrders: function () {
                    var self = this;
                    self.loading = true;
                    self.editorMode = false;
                    $.ajax({
                        url: '/api/Orders',
                        method: 'GET',
                        success: function (data) {
                            self.orders = data;
                            self.loading = false;
                        },
                        error: function (error) {
                            self.loading = false;
                            console.log(error);
                        },
                        cache: false,
                    });

                },
                refreshUsers: function () {
                    var self = this;
                    $.ajax({
                        url: '/api/User',
                        method: 'GET',
                        success: function (data) {
                            self.users = data;
                        },
                        error: function (error) {
                            self.loading = false;
                            console.log(error);
                        },
                        cache: false,
                    });

                }
            },
            computed: {
                filteredData: function () {
                    var userFilter = this.userFilter;
                    var data = this.orders;
                    if (userFilter) {
                        data = data.filter(function (row) {
                            return (userFilter.UserId === row.User.UserId);
                            //return Object.keys(row).some(function (key) {
                            //    return String(row[key]).toLowerCase().indexOf(filterKey) > -1
                            //})
                        });
                    }
                    return data
                }
            },
        });
    </script>
}
